### BMP Recovery 풀이 ###
-> BMP 파일에서 중요한 값들이 지워짐
-> 복구해서 flag 찾아야함.
-> flag.bmp를 복구하면 찾을 수 있음

## BMP 확장자. (Bitmap Image File) ##
-> 이미지 데이터를 픽셀 단위로 저장함. (압축 사용 x) ; RGB 방식.

*파일 헤더 (14바이트)
-> bfType(2): 0x42 0x4D(BM) ; 시그니처
-> bfSize(4): 파일 전체 크기
-> bfReserved1(2): 항상 0
-> bfReserved2(2): 항상 0
-> bfOffBits(4): 픽셀 데이터 오프셋 ; 파일 시작 위치부터 픽셀 데이터 시작 위치까지의 바이트 수

*이미지 헤더 (40~124바이트)
-> biSize(4): 비트맵 이미지 헤더 크기
-> biWidth(4): 비트맵 가로 픽셀 크기
-> biHeight(4): 비트맵 세로 크기
-> biPlanes(2): 항상 1 ; 사용하는 색상판 수
-> biBitCount(2): 픽셀 하나 표현하는 비트수; 1, 4, 8, 24, 32
-> biCompression(4): 압축방식(항상 0)
-> biSizeImage(4): 비트맵 픽셀 데이터 크기
-> biXPelsPerMeter(4): 가로 해상도
-> biYPelsPErMeter(4): 세로 해상도
-> biClrUsed(4): 사용되는 색상 수 (0이면 지정한 색상 수 모두 사용, 일반적으로 0)
-> biClrImportant(4): 일반적으로 0; 비트맵 화면 표현하기 위해 필요한 색상 인덱스 수

*색상 팔레트 (옵션, RGB 값)
*픽셀 데이터 (패딩은 4바이트 배수되도록 0으로 패딩)

# with open as 구문 - 파이썬 #
-> 파일을 열고 사용한 후 자동으로 닫아주는 기능
-> with open(파일 경로, 모드, 인코딩) as 파일

## 풀이 ##
-> 현재 0x00 ~ 0x35까지 0으로 되어 있음 (0x1c는 0x18로 되어 있음)
-> 정확히는 0x00 ~ 0x1B (27Byte), 0x22~0x35 (32바이트 ~ 43바이트)
-> 0x1C~0x21까지는 손상안됨.

-> 0x42 0x4D
-> DA 58 F6 (리틀 엔디안 저장할거임)
-> 0x36부터 오프셋 시작
-> 각 오프셋마다 value 채워주면됨

*깨달은 점
1. BMP 파일 구조
2. 파이썬 스크립트 작성하여 자동화 할 필요 있음
-> width와 height == 총 픽셀 수의 제곱근의 조합임 (시간 복잡도 감소.) (width*height=num_pixels)
3. with open as 구문
4. 제곱근으로 하면 역도 있으니까 그에 대한 것도 생성해주면 됨.


