### Grand Theft Auto ###
-> 자동차의 CAN과 통신해서 얻을 파일을 통해 어떤 자동차 인지 알아내기
-> DH{연도_제조사_모델명}

*CAN (Controller Area Network)
-> 차량 내의 전자 제어 장치(ECU) 간 데이터를 효율적이고 안정적으로 교환하기 위해 설계된 통신 프로토콜
-> 여러 ECU 존재 (엔진, 브레이크, 에어백 등)하며, 각 ECU는 센서 데이터를 수집하고 명령을 실행
-> 이 과정에서 ECU와 정보 교환 필요.

*구조
CAN 인터페이스(can0) | CAN ID(7E0) | DLC (8; 데이터 길이) | 데이터 

## 풀이 ##
-> 처음보는 바이너리 파일 존재
-> 7E0과 7E8은 각각 요청하고 응답하는 프레임 구조임.

참고: (https://piembsystech.com/data-identifiers-did-of-uds-protocol-iso-14229/)
참고: ISO-TP 프로토콜
-> 이거 2개 참고하면 아래처럼 분석 가능
-> CAN은 이거를 2개를 같이봐야됨

-> 0xF190은 VIN 번호 참조하는 사용 데이터이다.
-> 03 (데이터 길이) | 22 (서비스 ID) | F1 90 (요청된 데이터)
-> 10 14 (첫 번째 프레임) / 62 F1 90 (서비스 ID와 요청된 데이터) / 57 44 44 (데이터 첫 번째 응답)
-> 30 흐름 제어 프레임
-> 21 ... 후속 프레임

합치면 .. "57 44 44 48 46 35 47 42 35 42 41 32 37 30 38 36 36"
-> 이것을 VIN Decoder에서 해석하면 답나옴.

## candump 분석하는 방법 ##
-> 각 프레임의 데이터 부분은 어떤 프로토콜을 사용했냐에 따라 해석 방법이 달라짐.

*ISO-TP 프레임 분석 (이렇게 분석하면됨)
- UDS (SID | Data ID) ; 작업 유형, 요청하는 데이터 (SID가 요청에서 22면 응답에서는 62 오고 Data ID가 옴으로써 Data ID에 대한 것이라고 알려줌.)
1. Single Frame
- 첫 바이트: 0x0N (N = 데이터 길이, N <= 7)
- 나머지: 데이터 (이거는 UDS를 이용해 분석)

2. First Frame
- 첫 바이트: 0x1N (N = 데이터 길이의 상위 4비트)
- 두 번째 바이트: 데이터 길이의 하위 8비트
- 나머지: 초기 데이터 (UDS로 분석)

3. Flow Control Frame
- 첫 바이트: 0x30
- 두 번째 바이트: 블록 크기
- 세 번째 바이트: 간격 타이버
- 나머지: 패딩

4. Continuation Frame
- 첫 바이트: 0x2N: (N = 연속 프레임의 번호)
- 나머지: 데이터