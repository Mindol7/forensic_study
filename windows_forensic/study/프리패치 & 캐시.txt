### 프리패치 및 캐시 ###

## 들어가며 ##
-> 프리패치와 캐시는 응용프로그램을 실행했을 때 생성됨.
-> 언제 어떤 프로그램을 실행했는 지 알 수 있음.

"많은 사용자 행위는 응용 프로그램을 기반으로 이루어짐"

## 프리패치(Prefetch) ##
-> Windows 운영체제에서 응용프로그램을 시작할 때 성능을 향상하기 위한 파일
-> Windows 운영체제는 응용프로그램의 실행 정보를 '프리패치 파일'로 미리 저장하고, 메모리에 프리패치 파일 미리 로드
-> 응용 프로그램을 실행할 때 디스크가 아닌 메모리에서 정보 빠르게 읽음
"실행 속도 향상"

*종류: 부트 프리패치, 응용프로그램 프리패치
-부트 프리패치: Windows 부팅 시에 동작하는 기능 (Windows 7 이전에서만 동작)

*응용프로그램 프리패치로 얻을 수 있는 정보
-> 실행 파일 이름, 실행 파일 경로
-> 실행 파일 실행 횟수, 최초 실행 시간, 마지막 실행 시간
-> 실행된 볼륨의 정보

# 프리패치 동작 원리 #
-> [FileName]-[FilePathHash].pf라는 이름을 가짐

*FileName: 실행된 응용프로그램 이름 (대문자로 변환해 가져옴)
*FilePathHash: 응용프로그램이 위치하는 경로를 이용해 계산한 해시 값 (경로가 달라지면 해시값이 달라짐)

-> 프리패치는 응용프로그램이 실행되고 10초 후에 생성 (즉, 10초 미만으로 실행된 응용 프로그램에 대해서는 프리패치 생성 안됨.)
-> 프리패치의 최대 갯수는 Windows 10기준으로 1,024개 (1024개를 오버하면 가장 오래된 프리패치를 삭제함)
-> 프리패치는 Windows 10에서 기본으로 압축되어 저장. (압축된 프리패치의 시그니처는 MAM; 프리패치 분석도구에서 압축 해제 지원)
-> 압축 해제된 프리패치의 시그니처는 SCCA.

# 프리패치 분석 도구 #
-> WinPrefetchView

-Filename: 프리패치 파일 이름
-Created Time: 프리패치 생성 시각 (말 그대로 프리패치가 생성된 시각임)
-Modified Time: 프리패치 변경 시각 (말 그대로 프리패치가 변경된 시각임)
-File Size: 프리패치 파일 크기
-Process EXE: 프리패치 파일 크기
-Process Path: 응용 프로그램 경로 -> 응용 프로그램이 실행된 경로를 알 수 있다.
-Run Counter: 응용 프로그램 실행 횟수
-Last Run Time: 응용 프로그램 마지막 실행 시각 (이게 중요함. 이게 진짜 응용 프로그램 실행 시각임!)
-Missing Process: 응용 프로그램 삭제 여부

-Filename: 응용프로그램과 함께 로드된 파일의 이름
-Full path: 응용프로그램과 함께 로드된 파일의 경로
-Device Path: 볼륨 정보를 포함한 경로 -> 응용프로그램이 실행된 볼륨의 정보를 알 수 있음
-Index: 응용프로그램 실행 과정에서 로드된 순서

# 프리패치 수집 및 분석 #
-> 경로: "%SystemRoot%\Prefetch" (Ex. C:\Windows\Prefetch)
Step1) Prefetch 폴더를 FTK Imager를 이용해 export하기
Step2) Options -> Advanced Options 버튼을 클릭해 추출한 프리패치 폴더 등록

1. 외부 저장장치 프로그램 실행
*Process Path에 #VOLUMN이 있으면 외부 저장장치에서 실행된 것임.

2. 응용 프로그램 삭제된 경우
-> Missing Process가 Yes인 경우
-> 이 경우 좀 더 신경써서 분석해야함. 악성코드는 실행 과정에서 자신을 삭제하는 경우가 많음

3. 정상 프로세스에서 의심스러운 동작이 의심되는 경우
-> DLL Injection 등의 공격을 수행한 경우, DLL 목록에서 수상한 경로 발견 가능
-> 현실적으로 모든 프리패치 파일의 DLL 경로 검사하는 것은 어려움
-> 이에 따라 다른 아티팩트 분석하다가 의심스러운 행위가 있을 때에 이러한 분석 진행 필요

* DLL Injection: 응용 프로그램 실행 중에 외부 DLL을 강제로 주입해 프로그램의 동작을 제어하거나 변경하는 기술

## 응용 프로그램 캐시 ##
-> 응용 프로그램이 실행되면서 여러 기능을 지원하기 위해 운영체제에 기록하는 데이터
-> 응용 프로그램 존재 여부, 파일 이름, 파일 경로 포함 (응용프로그램의 실행 흔적 분석)

-MUICache: 다중 언어를 지원하기 위한 캐시
-AmCache: 프로그램 호환성 관리자와 관련된 캐시
-ShimeCache: 응용 프로그램 간 호환성을 지원하기 위한 캐시

# MUICache #
Ex) notepad.exe는 모든 언어의 윈도우에 포함되어 있지만, 한국어 버전에서는 메모장으로 작동
-> MUICache에 프로그램 이름을 저장하고, 실행 시에 참고하여 언어 데이터 가져옴
"HKCU\Software\Classes\Local Settings\MuiCache"
"HKCU\Software\Classes\Local Settings\Software\Microsoft\Windows\Shell\MuiCache"
-> 프로그램 한 번이라도 실행되었다면 MUICache 목록에 저장. (오래된 실행 기록도 삭제 되지 않음)
-> 외부 저장장치에서 실행되었는 지 여부 알 수 있음.

# AmCache #
-> AmCache.hve 파일로 저장.
-> 실행 파일의 전체 경로 저장
-> 23:30에 하루에 한 번 캐시 데이터 업데이트함

%SystemDrive%\Windows\AppCompat\Programs
-> LOG1, LOG2도 존재하는데 모두 수집해야함

- Root\InventoryDevicePnp: 시스템에 연결되었던 기기 및 드라이버 정보
- Root\InventoryApplication: 시스템에서 실행된 응용 프로그램 정보 ; 응용 프로그램 설치 흔적 알 수 있음, 삭제 흔적도 알 수 있음

# ShimCache #
-> 응용 프로그램간 호환성 문제를 해결하기 위한 정보
-> API 호출을 가로채서 전달할 수 있는 라이브러리 (기존 API와 최신 API의 호환성이 해결됨)
-> 실행 파일 경로, 실행 여부, 마지막 수정 시간 정보를 저장 (응용프로그램의 실행 흔적 분석에 유용)

- "HKLM\SYSTEM\CurrentControlSet\Control\Session Manager\AppCompatCache\AppCompatCache"
- "HKML\SYSTEM\ControlSet00?\Control\Session Manager\AppCompatCache\AppCompatCache"
-> 바이너리 형태로 존재

-> AppCompatCacheParser 도구로 분석
: -f 옵션으로 SYSTEM 레지스트리 파일 지정, 지정하지 않으면 SYSTEM 레지스트리 이용

# 캐시 분석 시 주의할 점 #
-> 교차 검증이 필요
-> 윈도우 버전과 실행 환경에 따라 캐시 데이터가 동작하는 방식이 다를 수 있음.

























































